/*
    file: transform.pyinc

    Python bindings for KC3D::Transform and related classes

    Copyright 2012-2014 Cirilo Bernardo (cjh.bernardo@gmail.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>

*/



//
//  class KC3D::QUAT
//
class_<KC3D::QUAT>("Quat", "Basic quaternion", init<>())
    .def(init<const KC3D::QUAT &>())
    .def(init<double, double, double, double>())

    // operators
    .def(- self)
    .def(self + self)
    .def(self - self)
    .def(self * self)
    .def(self * double())
    .def(double() * self)
    .def(self / double())
    .def("normalize", &KC3D::QUAT::Normalize, "normalize the quaternion")
    .def("vnormalize", &KC3D::QUAT::VNormalize, "normalize the vector component")
    .def("cross", &KC3D::QUAT::Cross, "calculate the non-normalized cross product and angle")

    // member variables
    .def_readwrite("w", &KC3D::QUAT::w, "scalar component")
    .def_readwrite("x", &KC3D::QUAT::x, "vector component 1")
    .def_readwrite("y", &KC3D::QUAT::y, "vector component 2")
    .def_readwrite("z", &KC3D::QUAT::z, "vector component 3")
;



//
//  class KC3D::TRANSLATION
//
class_<KC3D::TRANSLATION>("Translation", "3D TRANSLATION", init<>())
    .def(init<KC3D::QUAT>())
    .def(init<const KC3D::TRANSLATION &>())
    .def(init<double, double, double>())

    // operators
    .def(- self)
    .def(self + KC3D::QUAT())
    .def(self + self)
    .def(self - KC3D::QUAT())
    .def(self - self)
    .def(self * double())
    .def(double() * self)
    .def(self / double())

    // member functions
    .def("set", k3d_tra_set1, "set the translation parameters")
    .def("set", k3d_tra_set2, "set the translation parameters")
    .def("translate", k3d_tra_tran1, "translate a point")
    .def("translate", k3d_tra_tran2, "translate a point")
    .def("isUnity", &KC3D::TRANSLATION::IsUnity, "return 1 if this is a unity translation")
;



//
//  class KC3D::ROTATION
//
class_<KC3D::ROTATION>("Rotation", "3D rotation on an axis passing through (0, 0, 0)", init<>())
    .def(init<KC3D::QUAT>())
    .def(init<double, double, double, double>())

    // member functions
    .def("rotate", k3d_rot_rot1, "rotate a point")
    .def("rotate", k3d_rot_rot2, "rotate a point")
    .def("set", k3d_rot_set1, "set the rotation parameters")
    .def("set", k3d_rot_set2, "set the rotation parameters")
    .def("get", &KC3D::ROTATION::Get, "retrieve the rotation parameters")
    .def("isUnity", &KC3D::ROTATION::IsUnity, "return 1 if this is a unity rotation")
;



//
//  class KC3D::SCALE
//
class_<KC3D::SCALE>("Scale", "3D scaling", init<>())
    .def(init<KC3D::QUAT>())
    .def(init<double, double, double>())

    // member functions
    .def("scale", k3d_scale_scale1, "scale a point")
    .def("scale", k3d_scale_scale2, "scale a point")
    .def("set", &KC3D::SCALE::Set, "set the scaling parameters")
    .def("isUnity", &KC3D::SCALE::IsUnity)
;



//
//  class KC3D::TRANSFORM
//
class_<KC3D::TRANSFORM>("Transform", "Geometric transformation (Rotate, Translate, SCALE)", init<>())
    .def(init<KC3D::TRANSLATION, KC3D::ROTATION, KC3D::SCALE>())

    // member functions
    .def("set", &KC3D::TRANSFORM::Set, "set all transform parameters")
    .def("setTranslation", k3d_xf_setTra1, "set translation parameters")
    .def("setTranslation", k3d_xf_setTra2, "set translation parameters")
    .def("setTranslation", k3d_xf_setTra3, "set translation parameters")
    .def("setRotation", k3d_xf_setRot1, "set rotation parameters")
    .def("setRotation", k3d_xf_setRot2, "set rotation parameters")
    .def("setRotation", k3d_xf_setRot3, "set rotation parameters")
    .def("setScale", k3d_xf_setSca1, "set scaling parameters")
    .def("setScale", k3d_xf_setSca2, "set scaling parameters")
    .def("setScale", k3d_xf_setSca3, "set scaling parameters")
    .def("setScale", k3d_xf_setSca4, "set scaling parameters")
    .def("xform", k3d_xf_xform1, "transform a point")
    .def("xform", k3d_xf_xform2, "transform a point")
    .def("xform", k3d_xf_xform3, "transform an array of points")
    .def("xform", k3d_xf_xform4, "transform an array of points")
    .def("getTRANSLATION", &KC3D::TRANSFORM::GetTranslation, "retrieve translation parameters")
    .def("getROTATION", &KC3D::TRANSFORM::GetRotation, "retrieve Rotation parameters")
    .def("getSCALE", &KC3D::TRANSFORM::GetScale, "retrieve scaling parameters")
;
