/*
    file: polygon.pyinc

    Python bindings for KC3D::POLYGON

    Copyright 2012-2014 Cirilo Bernardo (cjh.bernardo@gmail.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>

*/

//
//  class KC3D::POLYGON
//

class_<KC3D::POLYWRAP, boost::noncopyable >("Polygon", "Generic POLYGON", no_init)
    .def("clone", &KC3D::POLYWRAP::Clone, "Create a copy of this class of polygon",
        return_value_policy<manage_new_object>())

    .def("calc", &KC3D::POLYWRAP::Calc, "Calculate the polygon vertices",
        args("xl: X dimension", "yl: Y dimension", "t: transform to apply to results"))

    .def("isValid", &KC3D::POLYWRAP::IsValid, "Returns 1 if the polygon holds valid vertices")

    .def("paint", &KC3D::POLYWRAP::Paint, "Paint the faces of the polygon",
        args("t: transform to apply to output", "color: appearance specification",
        "reuse: 1 to reuse the color", "fp: open output file", "tabs: formatting indent level"))

    .def("stitch", &KC3D::POLYWRAP::Stitch, "Paint facets joining two polygons",
        args("p2: second polygon", "t: transform to apply to output", "color: appearance specification",
        "reuse: 1 to reuse the color", "fp: open output file", "tabs: formatting indent level"))

    .def("extrude", &KC3D::POLYWRAP::Extrude, "Extrude this polygon")

    .def("xform", &KC3D::POLYGON::Xform, "TRANSFORM the internal vertices of the polygon")

    .def("getNVertices", &KC3D::POLYGON::GetNVertices, "Retrieve number of internal vertices")
    .def("getX", &KC3D::POLYGON::GetX, "Retrieve vertex X coordinate")
    .def("getY", &KC3D::POLYGON::GetY, "Retrieve vertex Y coordinate")
    .def("getZ", &KC3D::POLYGON::GetZ, "Retrieve vertex Z coordinate")

    .def("reverse", &KC3D::POLYGON::Reverse, "Reverse the order of vertices")

;

class_<KC3D::SIMPLEPOLY, bases<KC3D::POLYGON> >("SimplePoly", "POLYGON of 3 .. N arbitrary vertices", init<>())
.def(init<>())
.def(init<const KC3D::SIMPLEPOLY &>())
.def(init<const KC3D::POLYGON &>())

.def("setValues", &KC3D::SIMPLEPOLY::SetValues, "Add polygon points to this object")
.def("addVertex", &KC3D::SIMPLEPOLY::AddVertex, "Add a point to the vertex list")
.def("paint", &KC3D::POLYGON::Paint)
.def("stitch", &KC3D::POLYGON::Stitch)
.def("extrude", &KC3D::POLYGON::Extrude)
.def("xform", &KC3D::POLYGON::Xform)
;
